{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\t6201\\\\OneDrive\\\\Documents\\\\Hackslash minor project\\\\DP\\\\frontend1\\\\src\\\\components\\\\DoctorRegistration.js\",\n  _s = $RefreshSig$();\n// src/components/DoctorRegistration.js\nimport React, { useState } from 'react';\nimport { JsonRpcProvider } from 'ethers';\nimport { ethers } from 'ethers';\nimport ABI from \"../ABI.json\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractABI = ABI;\nconst contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\nfunction DoctorRegistration() {\n  _s();\n  const [doctorAddress, setDoctorAddress] = useState('');\n  const [doctorName, setDoctorName] = useState('');\n  const [specialization, setSpecialization] = useState('');\n  const [status, setStatus] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      //  Save doctor data to MongoDB\n      const response = await axios.post('http://localhost:5000/doctors/register', {\n        doctorAddress,\n        doctorName,\n        specialization\n      });\n      cl;\n      if (response.status === 201) {\n        // Register doctor on Blockchain\n        const provider = new JsonRpcProvider(\"https://worldchain-mainnet.g.alchemy.com/v2/eKts84nwt0sq58_ObZim0mCTBCvibcoG\");\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(contractAddress, contractABI, signer);\n        const tx = await contract.registerDoctor(doctorAddress, doctorName, specialization);\n        await tx.wait();\n        setStatus('Doctor registered successfully and saved to MongoDB!');\n      } else {\n        setStatus('Error saving doctor to MongoDB.');\n      }\n    } catch (error) {\n      setStatus('Error registering doctor.');\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Register Doctor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: doctorAddress,\n        onChange: e => setDoctorAddress(e.target.value),\n        placeholder: \"Doctor Address\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: doctorName,\n        onChange: e => setDoctorName(e.target.value),\n        placeholder: \"Doctor Name\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: specialization,\n        onChange: e => setSpecialization(e.target.value),\n        placeholder: \"Specialization\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Register Doctor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), status && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(DoctorRegistration, \"OP5A0CRsmt/Sz/X3lK9JPNoLlds=\");\n_c = DoctorRegistration;\nexport default DoctorRegistration;\nvar _c;\n$RefreshReg$(_c, \"DoctorRegistration\");","map":{"version":3,"names":["React","useState","JsonRpcProvider","ethers","ABI","axios","jsxDEV","_jsxDEV","contractABI","contractAddress","DoctorRegistration","_s","doctorAddress","setDoctorAddress","doctorName","setDoctorName","specialization","setSpecialization","status","setStatus","handleSubmit","e","preventDefault","response","post","cl","provider","signer","getSigner","contract","Contract","tx","registerDoctor","wait","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","required","_c","$RefreshReg$"],"sources":["C:/Users/t6201/OneDrive/Documents/Hackslash minor project/DP/frontend1/src/components/DoctorRegistration.js"],"sourcesContent":["// src/components/DoctorRegistration.js\r\nimport React, { useState } from 'react';\r\nimport { JsonRpcProvider } from 'ethers';\r\nimport { ethers } from 'ethers';\r\nimport ABI from \"../ABI.json\";\r\nimport axios from 'axios'; \r\n\r\nconst contractABI = ABI;\r\nconst contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\r\n\r\nfunction DoctorRegistration() {\r\n  const [doctorAddress, setDoctorAddress] = useState('');\r\n  const [doctorName, setDoctorName] = useState('');\r\n  const [specialization, setSpecialization] = useState('');\r\n  const [status, setStatus] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      //  Save doctor data to MongoDB\r\n      const response = await axios.post('http://localhost:5000/doctors/register', {\r\n        doctorAddress,\r\n        doctorName,\r\n        specialization\r\n      });\r\n      cl\r\n\r\n      if (response.status === 201) {\r\n        // Register doctor on Blockchain\r\n        const provider = new JsonRpcProvider(\"https://worldchain-mainnet.g.alchemy.com/v2/eKts84nwt0sq58_ObZim0mCTBCvibcoG\");\r\n        const signer = provider.getSigner();\r\n        const contract = new ethers.Contract(contractAddress, contractABI, signer);\r\n\r\n        const tx = await contract.registerDoctor(doctorAddress, doctorName, specialization);\r\n        await tx.wait();\r\n\r\n        setStatus('Doctor registered successfully and saved to MongoDB!');\r\n      } else {\r\n        setStatus('Error saving doctor to MongoDB.');\r\n      }\r\n    } catch (error) {\r\n      setStatus('Error registering doctor.');\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Register Doctor</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value={doctorAddress}\r\n          onChange={(e) => setDoctorAddress(e.target.value)}\r\n          placeholder=\"Doctor Address\"\r\n          required\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          value={doctorName}\r\n          onChange={(e) => setDoctorName(e.target.value)}\r\n          placeholder=\"Doctor Name\"\r\n          required\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          value={specialization}\r\n          onChange={(e) => setSpecialization(e.target.value)}\r\n          placeholder=\"Specialization\"\r\n          required\r\n        />\r\n        <button type=\"submit\">Register Doctor</button>\r\n      </form>\r\n      {status && <p>{status}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DoctorRegistration;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}